package unalcol.evolution;

import java.util.Vector;


/**
 * <p>Title: Selection</p>
 * <p>Description: The abstract selection operator</p>
 * <p>Copyright: Copyright (c) 2006</p>
 * <p>Company: Universidad Nacional de Colombia</p>
 *
 * @author Jonatan Gomez Reviewed by (Aurelio Benitez, Giovanni Cantor, Nestor Bohorquez)
 * @version 1.0
 */

public abstract class Selection extends Operator {
    /**
     * Number of individuals that will be selected
     */
    protected int n = 1;

    /**
     * If the individual given in the apply method is going to be selected always or not
     */
    protected boolean includeX = false;

    /**
     * Constructor: Create a selection operator that chooses n individuals of a population
     *
     * @param _n        Number of individuals to be choosen
     * @param _includeX If the individual given in the apply method is going to be selected always or not
     */
    public Selection(Environment _environment, int _n, boolean _includeX) {
        super(_environment);
        n = _n;
        includeX = _includeX;
    }

    /**
     * Constructor: Create a selection operator that chooses n individuals of a population
     *
     * @param _n Number of individuals to be choosen
     */
    public Selection(Environment _environment, int _n) {
        super(_environment);
        n = _n;
    }

    /**
     * Choose a set of individuals from the population including the individual x
     *
     * @param population Population source of the selection process
     * @param x          Individual to be included in the selection
     */
    public abstract Vector<Individual> choose(Population population, int x);

    /**
     * Choose a set of individuals from the population without including special individuals
     *
     * @param population Population source of the selection process
     */
    public Vector<Individual> choose(Population population) {
        return choose(population, -1);
    }

    ;

    /**
     * Apply the operator over the given individual
     *
     * @param population Source population
     * @param x          Individual used as first parent
     * @return A collection of individuals generated by the operator. This
     * operator generates the number of individuals given by the operator arity
     */
    public Vector<Individual> apply(Population population, int x) {
        Vector<Individual> sel = null;
        if (population != null) {
            if (includeX) {
                sel = choose(population, x);
            } else {
                sel = choose(population);
            }
        }
        return sel;
    }

    /**
     * Set the number of individuals to be choosen
     *
     * @param n Number of individuals to be choosen
     */
    public void setSize(int n) {
        this.n = n;
    }

    /**
     * Return the genetic operator arity
     *
     * @return the genetic operator arity
     */
    public int getArity() {
        return n;
    }
}
