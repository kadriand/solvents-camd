package unalcol.evolution.operators;

import java.util.Vector;

import unalcol.core.Cloner;
import unalcol.evolution.*;

/**
 * <p>Title:ArityOne</p>
 * <p>Description: A unary operator</p>
 * <p>Copyright:    Copyright (c) 2006</p>
 * <p>Company:Universidad Nacional de Colombia</p>
 *
 * @author Jonatan Gomez Reviewed by (Aurelio Benitez, Giovanni Cantor, Nestor Bohorquez)
 * @version 1.0
 */

public abstract class ArityOne<T> extends Operator {

    /**
     * Constructor: Create a genetic operator with arity equal one
     */
    public ArityOne(Environment _environment) {
        super(_environment);
    }


    /**
     * Apply the unary genetic operator over the individual
     *
     * @param obj Individual to be modified by the genetic operator
     * @return extra information of the genetic operator
     */
    public abstract Vector<T> apply(T obj);

    /**
     * Apply the operator over the given individuals
     *
     * @param population Source population
     * @param x          Individual used as first parent
     * @return A collection of individuals generated by the operator
     */
    public Vector<Individual> apply(Population population, int x) {
        Vector<Individual> v = null;
        if (population != null) {
            v = new Vector<Individual>();
            T genome = (T) population.get(x).getGenome();
            Vector<T> genomes = apply(genome);
            int n = genomes.size();
            for (int i = 0; i < n; i++) {
                v.add(new Individual(genomes.get(i)));
            }
        }
        return v;
    }

    /**
     * Return the genetic operator arity
     *
     * @return the genetic operator arity
     */
    public int getArity() {
        return 1;
    }

}
