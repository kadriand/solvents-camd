package unalcol.evolution.operators;

import java.util.Vector;

import unalcol.core.Cloner;
import unalcol.evolution.*;
import unalcol.evolution.selections.Tournament;

/**
 * <p>Title:ArityTwo</p>
 * <p>Description: A binary operator </p>
 * <p>Copyright:    Copyright (c) 2006</p>
 * <p>Company:Universidad Nacional de Colombia</p>
 *
 * @author Jonatan Gomez Reviewed by (Aurelio Benitez, Giovanni Cantor, Nestor Bohorquez)
 * @version 1.0
 */

public abstract class ArityTwo<T> extends Operator {
    /**
     * The parent selection mechanism
     */
    protected Selection selection;

    /**
     * Constructor: Create a arity-two operator with the Tournament selection strategy for
     * the parent selection (tournament size = 4) including the given individual
     */
    public ArityTwo(Environment _environment) {
        super(_environment);
        selection = new Tournament(environment, 2, true, 4);
    }

    /**
     * Constructor: Create a crossover operator with the given selection parent strategy
     */
    public ArityTwo(Environment _environment, Selection _selection) {
        super(_environment);
        selection = _selection;
        if (selection != null) {
            selection.setSize(2);
        }
    }

    /**
     * Sets the selection operator for the given two arity operator.
     *
     * @param _selection Selection mechanism used by the operator for getting
     *                   the additional parent
     */
    public void setSelection(Selection _selection) {
        selection = _selection;
    }

    public Selection getSelection() {
        return selection;
    }

    /**
     * Apply the binary genetic operator over the individual
     *
     * @param one First individual to be modified by the genetic operator
     * @param two Second individual to be modified by the genetic operator
     * @return extra information of the genetic operator
     */
    public abstract Vector<T> apply(T one, T two);


    /**
     * Apply the operator over the given individuals
     *
     * @param population Source population
     * @param x          Individual used as first parent
     * @return A collection of individuals generated by the operator
     */
    public Vector<Individual> apply(Population population, int x) {
        Vector<Individual> children = null;
        if (population != null && selection != null) {
            Vector<Individual> parents = selection.choose(population, x);
            // only for two children
            Vector<T> genomes = apply((T) parents.get(0).getGenome(),
                    (T) parents.get(1).getGenome());
            children = new Vector<Individual>();
            children.add(new Individual(genomes.get(0)));
            children.add(new Individual(genomes.get(1)));
        }
        return children;
    }

    /**
     * Return the genetic operator arity
     *
     * @return the genetic operator arity
     */
    public int getArity() {
        return 2;
    }

    public void setEnvironment(Environment _environment) {
        super.setEnvironment(_environment);
        selection.setEnvironment(environment);
    }

}
